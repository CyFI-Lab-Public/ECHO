
import json, os, sys

from GleanMongoDB.DB_Template import DB_Template
PROJ_ROOT_FOLDER = os.environ['GLEAN_PATH']
if not PROJ_ROOT_FOLDER in sys.path:
    sys.path.append(PROJ_ROOT_FOLDER)
from ENV import *

malware_attributes = {
    # '_id': '', # mongo_id
    'sample_hash': "", #sha256 hash of the sample
    'binary_path': "", #path to the binary file
    'package_name': "", # Package name
    'batch': BATCH, # batch number
    'added_time': None,     # datetime
    'is_valid_sample': False, # whether the sample is valid
    'vt_report_path': "",
    'avclass_result_path': "",
    'avclass_result': {},
    'idle': True,
    #========= class scan field ===========#
    'init_classes_scanned': False, # whether the init classes are scanned
    'class_scan_result_path': "", # path to the class scan result
    'class_scan_log_path': "", # path to the class scan log
    #'classes': [], # path to the classes.dex file
    # ========== unpack field ===========#
    'unpacked': False, # whether the sample is unpacked
    'has_new_classes': False, # whether the sample has new classes
    'dex_files': [],
    'new_dex_list': [],
    'new_classes': [],
    "unpack_bridge_path": "",
    'unpack_result_folder_path': "",
    "unpack_sample_binary_path": "",
    "unpack_success": False,
    'can_install':True,        # True if the sample can be installed
    'install_err':"",           # error message if the sample cannot be installed
    # ========= flowDroid jsi Field ========= #
    'flowdroid_jsi_processed': False, # True if flowdroid analysis has been performed
    'flowdroid_jsi_result_path':None, # path to the flowdroid result file
    'flowdroid_jsi_log_path': None,     # path to flowdroid the log file
    'num_of_jsi_interface_entrypoint': -1, # -1 means not processed
    'flowdroid_jsi_entrypoint_with_takedown_capability': -1,
    # ========== flowDroid dcl field =========== #
    'flowdroid_dcl_processed': False, # True if flowdroid analysis has been performed
    'flowdroid_dcl_result_path':None, # path to the flowdroid result file
    'flowdroid_dcl_log_path': None,     # path to flowdroid the log file
    'num_of_dcl_routine': -1, # -1 means not processed
    # =========== dynamic dcl Field +========== #
    'dynamic_dcl_processed': False, # True if dynamic analysis is done
    'dynamic_dcl_result_path': None, # path to the dynamic dcl result file
    'dynamic_no_net_dcl_result_path': None,
    'dynamic_evaluation_summary_path': None,
    'dynamic_dcl_log_path': None, # path to the dynamic dcl log file
    'dynamic_dcl_jsi_of_interest_path': None, # path to the json file of jsi of interest from dynamic dcl
    'is_candidate': False,
    'is_dcl_possible': False,
    'is_jsi_possible': False,
    'network_traffic_summary': None, 
    'network_traffic_summary_path': None, 
    'network_traffic_log_folder_path': None,
    # =========== dynamic valid Field +========== #
    'ready_for_validation': False,
    'dynamic_valid_processed': False,
    'dynamic_valid_log_path': None,
    'dynamic_jsi_result_path': None, # path to the dynamic jsi result file
    'dynamic_dcl_valid_result_folder_path':"",
    'num_of_dcl_validation_hit': -1,
    'num_of_jsi_validation_hit': -1,
    # =========== extract field ===========#
    'manual_reversed': False,
    "notes": "",
    'manual_is_dcl_gt': False,
    'manual_is_jsi_gt': False,
    'labeled_family' : "",
    'dcl_payload_type': "",
    'dcl_remote_host': "",
    'jsi_payload_type': "",
    'jsi_remote_host': "",
    'jsi_categories': [], 
    'routines': [],
    'apkid': None
}

class Malware(DB_Template):
    def __init__(self, malware_dict = None, *args, **kwargs):
        super().__init__(malware_attributes, malware_dict, *args, **kwargs)
        