import json, os, sys
PROJ_ROOT_FOLDER = os.environ['GLEAN_PATH']
if not PROJ_ROOT_FOLDER in sys.path:
    sys.path.append(PROJ_ROOT_FOLDER)
from ENV import *


from datetime import datetime, timedelta
import random
import pymongo
from pymongo.errors import ConnectionFailure, NetworkTimeout

from GleanMongoDB.Malware import Malware
from GleanMongoDB.Class import Class

from ENV import *
from Utility import Utility


def check_connection(func):
        def inner(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except ConnectionFailure as e:
                print(e)
                MalwareMongo.init_mongo_connection_channel()
                return func(*args, **kwargs)
        return inner
        
class MalwareMongo:
    def __init__(self, test_connection: bool = False, malware_collection_name:str='malware', class_collection_name:str='class') -> None:
        self.mongoClient, self.db, self.collection, self.collection_clz = self.init_mongo_connection(test_connection, malware_collection_name, class_collection_name)
    

    def init_mongo_connection(self, test_connection: bool = False, malware_collection_name: str = 'malware', class_collection_name: str = 'class'):
        # mongoClient = MongoClient('mongodb://%s:%s@localhost:27017' % (urllib.parse.quote_plus(ControlENV.MONGO_USER), urllib.parse.quote_plus(ControlENV.MONGO_PWD)))    
        MalwareMongo.init_mongo_connection_channel()
        if  Utility.get_my_ip() == MONGO_HOST_IP_ADDR:
            port = MONGO_PORT
        else:
            port = MONGO_LOCAL_PORT
        mongoClient = pymongo.MongoClient(host=LOCALHOST, port=port, username = MONGO_USER, password=MONGO_PWD)
        db = mongoClient[MONGO_DB_NAME]
        
        if test_connection:
            try:
                print("MongoDB connection test:")
                print("MongoDB version: %s" % db.command("serverStatus")['version'])
                print("MongoDB connection status: %s" % db.command("serverStatus")['ok'])
                print("MongoDB connection test done.")
            except Exception as e:
                print(e)
                exit()
        print("db init success")
        collection = db[malware_collection_name]
        collection_clz = db[class_collection_name]
        return mongoClient, db, collection, collection_clz
    
    @check_connection
    def update(self, malware: Malware, collection:str = None):
        if collection == None:
            collection = self.collection      
        count = collection.count_documents({"sample_hash": malware.sample_hash})
        if count == 0:
            success = collection.insert_one(malware.to_dict())
        else: 
            success = collection.replace_one({"sample_hash": malware.sample_hash}, malware.to_dict())
        return success

    @check_connection
    def update_class(self, clz: Class, collection:str = None):
        if collection == None:
            collection = self.collection_clz      
        count = collection.count_documents({"class_hash": clz.class_hash})
        if count == 0:
            success = collection.insert_one(clz.to_dict())
        else: 
            success = collection.replace_one({"class_hash": clz.class_hash}, clz.to_dict())
        return success
    
    @check_connection
    def query_and_update(self, q, update, collection = None):
        if collection == None:
            collection = self.collection
        result = collection.update_many(q, {"$set": update})
        return result

    @check_connection
    def query_and_update_class(self, q, update, collection = None):
        if collection == None:
            collection = self.collection_clz
        result = collection.update_many(q, {"$set": update})
        return result

    @check_connection
    def get_record(self, sample_hash:str): 
        return self.collection.find_one({'sample_hash': sample_hash})

    @check_connection
    def get_record_class(self, class_hash: str):
        return self.collection_clz.find_one({'class_hash': class_hash})
    
    @check_connection
    def query(self, q, sort_key = None, reverse = False, collection = None):
        if collection == None:
            collection = self.collection
        result = collection.find(q)
        if sort_key != None:
            result.sort(sort_key, pymongo.DESCENDING if reverse else pymongo.ASCENDING)
        return list(result)
    
    @check_connection
    def query_class(self, q, sort_key = None, reverse = False, collection = None):
        if collection == None:
            collection = self.collection_clz
        result = collection.find(q)
        if sort_key != None:
            result.sort(sort_key, pymongo.DESCENDING if reverse else pymongo.ASCENDING)
        return list(result)


    @check_connection
    def remove(self, q:dict, collection = None):
        if collection == None:
            collection = self.collection
        collection.delete_many(q)
    
    @check_connection
    def remove_class(self, q:dict, collection = None):
        if collection == None:
            collection = self.collection_clz
        collection.delete_many(q)



    # apis for specific usage 
    @check_connection
    def get_all_malwares(self, collection = None):
        if collection == None:
            collection = self.collection
        return self.query({})
    
    @staticmethod
    def init_mongo_connection_channel():
        if not Utility.check_port_forwarding(MONGO_LOCAL_PORT):
            if not Utility.setup_port_forwarding(MONGO_LOCAL_PORT, MONGO_HOST_SSH_CONFIG_NAME, MONGO_PORT):
                print("Failed to setup port forwarding")
    
    
        

def add_fake_data(mongo, number_of_items):
    for i in range(number_of_items):
        mongo.update(get_fake_data(i))

def get_fake_data(item_num):
    i = item_num
    name = 'name ' + str(i)
    pkg =  'pkg_' + str(i)
    mal = Malware(device='FAKE_DEVICE')
    mal.sample_hash = name
    mal.start_time = datetime.utcnow() + timedelta(minutes=i)
    mal.package_name = pkg
    mal.end_time = datetime.utcnow() + timedelta(minutes=i, seconds = random.randint(10, 20))
    return mal  




if __name__ == '__main__':
    mongo = MalwareMongo() 
    all_malwares = mongo.get_all_malwares() 
    for malware in all_malwares:
        mobj = Malware(malware)
        mongo.update(Malware(malware))
        
