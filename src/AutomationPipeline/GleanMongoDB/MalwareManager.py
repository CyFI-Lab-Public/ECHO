import json, os, sys, time
from pydoc import isdata
PROJ_ROOT_FOLDER = os.environ['GLEAN_PATH']
if not PROJ_ROOT_FOLDER in sys.path:
    sys.path.append(PROJ_ROOT_FOLDER)
from ENV import *


import re
from datetime import datetime


from GleanMongoDB.Malware import Malware
from Utility import Utility
from GleanMongoDB.MalwareMongo import MalwareMongo

debug = False

class MalwareManager:
    def __init__(self, simple_bridge = True, malware_collection_name:str = DEFAULT_MALWARE_COLLECTION_NAME, class_collection_name='class') -> None:
        self.malware_binary_paths = []
        self.mongo = MalwareMongo(malware_collection_name=malware_collection_name, class_collection_name=class_collection_name)
        if not simple_bridge:
            self.malware_samples = self.mongo.get_all_malwares()
            self.sample_hash_to_malware_sample = {m['sample_hash']: Malware(m) for m in self.malware_samples}
        else:
            self.malware_samples = None
            self.sample_hash_to_malware_sample = None
        
    # def hot_fix(self):
    #     for malware_dict in self.malware_samples:
    #         m = Malware(malware_dict)
    #         print(m.added_time.__class__.__name__)
    #         if(m.added_time.__class__.__name__ == 'dict'):
    #             ss = m.added_time['$date']
    #             dt =  datetime.now()
    #             m.added_time = dt.isoformat()
                
    #             print('hot fix')
    #             self.update_malware(m)
    #             print('hot fix done')
    
    def load_malware_dataset(self, malware_folder_paths) -> None:
            self.malware_binary_paths.clear()
            self.get_malware_binary_paths(malware_folder_paths)

            if self.malware_samples == None or self.sample_hash_to_malware_sample == None:
                self.malware_samples = self.mongo.get_all_malwares()
                self.sample_hash_to_malware_sample = {m['sample_hash']: Malware(m) for m in self.all_malware_samples_in_db}
            
            # check if there's any malware not in the database and add them
            total_number = len(self.malware_binary_paths)
            count = 0
            for malware_binary_path in self.malware_binary_paths:
                if count % 100 == 0:
                    print('loading malware dataset: ' + str(count) + '/' + str(total_number))
                count += 1
                
                sample_hash, malware_binary_path = self.rename_malware_name_with_hash(malware_binary_path)        
                if not sample_hash in self.sample_hash_to_malware_sample:
                    malware = self.get_or_init_malware_info(sample_hash, malware_binary_path)
                    if malware != None: 
                        self.malware_samples.append(malware)
                        self.sample_hash_to_malware_sample[sample_hash] = malware

            print("Total malware samples: " + str(len(self.malware_samples)))
            return len(self.malware_samples)    
            

    def get_malware_binary_paths(self, malware_folder_paths) -> None:        
        if (malware_folder_paths is None) or len(malware_folder_paths) == 0:
                malware_folder_paths = [SAMPLE_FOLDER_PATH]
            
        if isinstance(malware_folder_paths, str):
            malware_folder_paths = [malware_folder_paths]
        
        for malware_folder_path in malware_folder_paths:
            sample_list_from_folder = self.get_malware_binary_paths_from_single_folder(malware_folder_path)
            #print('folder:' + malware_folder_path + ' samples: ' + str(len(sample_list_from_folder)))
            self.malware_binary_paths.extend(sample_list_from_folder)
        print("Total potential malware samples: " + str(len(self.malware_binary_paths)))
        return self.malware_binary_paths
        

    def get_malware_binary_paths_from_single_folder(self, malware_folder_path: str) -> list:
        malware_binary_paths = []
        if malware_folder_path == None or malware_folder_path == "" or not os.path.exists(malware_folder_path):
            pass
        elif os.path.isfile(malware_folder_path):
            malware_binary_paths.append(malware_folder_path)
        else:  # is a real folder    
            for item in os.listdir(malware_folder_path):
                if os.path.isfile(os.path.join(malware_folder_path, item)):
                    malware_binary_paths.append(os.path.join(malware_folder_path, item))
                elif os.path.isdir(os.path.join(malware_folder_path, item)):
                    malware_binary_paths.extend(self.get_malware_binary_paths_from_single_folder(os.path.join(malware_folder_path, item)))
        print('folder:' + malware_folder_path + ' samples: ' + str(len(malware_binary_paths)))
        return malware_binary_paths
    
    
    def rename_malware_name_with_hash(self, malware_binary_path, force_check_hash=False) -> str:
        base_name = os.path.basename(malware_binary_path)
        sample_hash_from_name = base_name.split(".")[0]
        if (not force_check_hash) and re.match(r'^[0-9a-fA-F]{64}$', sample_hash_from_name):
            sample_hash = sample_hash_from_name
        else:
            sample_hash = Utility.get_file_hash(malware_binary_path, HASH_ALGORITHM)
        new_base_name = sample_hash + ".apk"
        new_binary_path = os.path.join(os.path.dirname(malware_binary_path), new_base_name)
        
        if not os.path.isfile(new_binary_path) and  base_name != new_base_name:
            res = os.rename(malware_binary_path, new_binary_path)
        return sample_hash, new_binary_path
    
    # init malware samples if not exists in the database, or get them from the database
    def get_or_init_malware_info(self, sample_hash: str, binary_path: str) -> Malware:
        malware_info = self.mongo.get_record(sample_hash)
        malware = None
        if malware_info != None:
            malware = Malware(malware_info)
            if(malware.binary_path != binary_path):  # unlikely to happen, but if path changes, update it
                malware.binary_path = binary_path
                self.update_malware(malware)
            if debug: 
                print(str(self.count) + " collect info for malware: " + malware.sample_hash)
        else: 
            is_apk_file = Utility.is_apk_file(binary_path)
            package_name = Utility.get_package_name(binary_path) if is_apk_file else None
            
            malware_info = {'sample_hash': sample_hash,
                                'binary_path': binary_path,
                                'package_name': package_name,
                                'is_valid_sample':  package_name != None and package_name != ""}

            malware = Malware(malware_info)
            malware.added_time = datetime.now().isoformat()
            self.update_malware(malware)
            if debug: print(str(self.count) + "init info for malware: " + malware.sample_hash)
        return malware  
    
    def get_samples_by_query(self, query: dict) -> list:
        if(query == None):
            return self.get_all_samples()
        else:
            return self.mongo.query(query)
    
    def update_malware(self, malware:Malware):
        self.mongo.update(malware)
    
    def query_and_update(self, q, update):
        self.mongo.query_and_update(q, update)
    
    def get_malware(self, malware:Malware):
        return self.mongo.get_record(malware.sample_hash)

    # TODO: APIs for different pipeline components to get malware samples 
   
    def reset_samples(self, query):
        samples = self.get_samples_by_query(query)
        for sample_dict in samples:
            malware = Malware()
            malware.sample_hash = sample_dict['sample_hash']
            malware.binary_path = sample_dict['binary_path']
            malware.package_name = sample_dict['package_name']
            malware.is_valid_sample = sample_dict['is_valid_sample']
            self.update_malware(malware)
   
    def get_all_samples(self) -> list:
        return self.mongo.get_all_malwares()
    
    def get_dynamic_evaluation_samples(self) -> list:
        return self.mongo.query({'is_valid_sample':True,
                                'dynamic_dcl_processed': False}, sort_key = 'added_time', reverse=True)
    
    def get_flowdroid_package_scan_list(self) -> list:
        return self.mongo.query({'is_candidate': True, 
                                'dynamic_dcl_processed' : True,
                                'init_classes_scanned': False}, sort_key='added_time', reverse=True)
                
    def get_unpack_list(self) -> list:
        return self.mongo.query({'is_candidate': True,
                                'dynamic_dcl_processed': True,
                                'init_classes_scanned': True,
                                'unpacked': False}, sort_key='added_time', reverse=True)
        
    def get_flowdroid_jsi_list(self) -> list:
        return self.mongo.query({'is_candidate': True,
                                'is_jsi_possible' : True,
                                'unpacked': True,
                                'unpack_success': True,
                                'dynamic_dcl_processed' : True,
                                'flowdroid_jsi_processed': False
                                }, sort_key='added_time', reverse=True)
        
    def get_flowdroid_dcl_list(self) -> list:
        return self.mongo.query({'is_candidate': True,
                                'is_dcl_possible': True,
                                'unpacked': True,
                                'unpack_success': True,
                                'dynamic_dcl_processed' : True,
                                'flowdroid_dcl_processed': False
                                }, sort_key='added_time', reverse=True)
    
    
    def get_dynamic_dcl_validation_samples(self) -> list:
        return self.mongo.query({'is_candidate':True,
                                'can_install': True,
                                'unpack_success': True,
                                'ready_for_validation': True,
                                'dynamic_valid_processed':False},sort_key='added_time', reverse=True)
    
    
    def get_sample_without_vt_report(self) -> list:
        return self.mongo.query({'is_valid_sample': True,
                                'is_candidate': True, 'labeled_family': ""}, sort_key='added_time', reverse=True)
    

    def get_avclass_labeling_sample(self) -> list:
        return self.mongo.query({'is_valid_sample': True,
                                'avclass_result_path': "",
                                'vt_report_path': {"$ne": ""}
                                })

    
    def get_apkid_packer_detection_samples(self) -> list:
        return self.mongo.query({'is_valid_sample':True,
                                'packers': []}, sort_key='added_time', reverse=True)        
        
    


# if __name__ == '__main__':
#     mm = MalwareManager()
#     sample_dicts = mm.get_all_samples()
#     sd = [s for s in sample_dicts if 'avclass_result' not in s]
    
#     for sample_dict in sample_dicts:
#         malware = Malware(sample_dict)
#         mm.update_malware(malware)